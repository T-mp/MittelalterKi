@page "/KI_Simulator_State"
@using System;
@using System.Threading
@using System.Collections.Generic;
@using MittelalterKi.Data;
@using MittelalterKi.Data.StateMachine;
@using MittelalterKi.Data.StateMachine.Umgebung;
@using MittelalterKi.Data.StateMachine.Materialien;
@using MittelalterKi.Data.StateMachine.Bedürfnise;
@using System.Globalization;

@*<input id="geschwindigkeit" type="number" @bind="geschwindigkeitSimulation" />*@ @*Geschwindigkeit der Simulation*@
<!doctype html>
<html lang="de">
<body>
    <div class="w-75 float-left">

        <div class="container">
            <div class="row mb-2">
                <div class="col">
                    <h1>Simulation Dorfbewohner StateMachine</h1>
                </div>
            </div>
        </div>

        <div class="container">
            <div class="row mb-2">
                <div class="col">
                    <span>Aktuelle Geschwindigkeit: @geschwindigkeitSimulation</span>
                    <span>Aktuelles MinLogLevel: @Logger.MinLogLevel</span>
                </div>
            </div>
            <div class="row mb-3">
                <div class="col">
                    <button class="btn btn-primary" @onclick="Simulation">Starte Simulation</button>
                </div>
            </div>
        </div>

        <div class="container Landschaft">

            @foreach (var uo in Umgebung)
            {
                <div class="umgebung" style="top:@(uo.Y)px; left:@(uo.X)px;">
                    @uo.Bild
                    <tooltip>
                        <ul class="bietet">
                            @foreach (var m in uo.Bietet)
                            {
                                <li>
                                    @m.Bild
                                    <ul class="befridigt">
                                        @foreach (var b in m.Befridigt)
                                        {
                                            <li>@b.Name:@b.Wert</li>
                                        }
                                    </ul>
                                    <ul class="braucht">
                                        @foreach (var b in m.Braucht)
                                        {
                                            <li>@b.Name:@b.Menge</li>
                                        }
                                    </ul>
                                </li>
                            }
                        </ul>
                    </tooltip>
                </div>
            }
            @foreach (var individuum in individuen)
            {
                <div class="individuum" style="top:@(individuum.Y)px; left:@(individuum.X)px;">
                    <div style="position:absolute; width:100%; height:100%;">@individuum.Id</div>

                    <div class="status">
                        @{
                            var gbs = individuum.Bedürfnise.Where(b => b is IGrundBedürfnis).ToList();
                            @foreach (var bedürfnis in gbs)
                            {
                                var min = bedürfnis.Min ?? bedürfnis.SollMin;
                                var max = bedürfnis.Max ?? bedürfnis.SollMax;
                                var div = max - min;
                                var norm = bedürfnis.Wert - min;

                                <div class="bedürfnis" style='height:100%; width:@((100/gbs.Count).ToString("0.00", CultureInfo.InvariantCulture))%;'>
                                    <div class="wert" style='background-color:red;'>
                                        <div style='height:@((100-(norm/max*100)).ToString("0.00", CultureInfo.InvariantCulture))%;'>.</div>
                                    </div>
                                    <div class="stärke" style='background-color:blue;'>
                                        <div style='height:@(((1-(bedürfnis.Stärke))*100).ToString("0.00", CultureInfo.InvariantCulture))%; '>.</div>
                                    </div>
                                    <tooltip>
                                        <p>@bedürfnis.Name@@@bedürfnis.Stärke.ToString("0.00"): @bedürfnis.Wert</p>
                                        <p>@bedürfnis.SollMin/@bedürfnis.SollMax</p>
                                        <p>@bedürfnis.Min/@bedürfnis.Max</p>
                                    </tooltip>
                                </div>
                            }
                        }
                    </div>

                    <tooltip>
                        <div class="container">
                            <div class="row">
                                <div class="col-1">
                                    <p>@individuum</p>
                                    <p>@individuum.BazeichnungAktuelleHandlung</p>
                                </div>
                                <div class="col-11">
                                    <div class="row">
                                        <div class="col">Bedürfnise:</div>
                                        @foreach (var bedürfnis in individuum.Bedürfnise)
                                        {
                                            <div class="col">
                                                <p>@bedürfnis.Name@@@bedürfnis.Stärke.ToString("0.00"): @bedürfnis.Wert</p>
                                                <p>@bedürfnis.SollMin/@bedürfnis.SollMax</p>
                                                <p>@bedürfnis.Min/@bedürfnis.Max</p>
                                            </div>
                                        }
                                    </div>
                                    <div class="row">
                                        <div class="col">Fähigkeiten:</div>
                                        @foreach (var fähigkeit in individuum.Fähigkeiten)
                                        {
                                            <div class="col">
                                                <p>@fähigkeit</p>
                                            </div>
                                        }
                                    </div>
                                    <div class="row">
                                        <div class="col">Zustände:</div>
                                        @foreach (var zustand in individuum.Zustände)
                                        {
                                            <div class="col">
                                                <p>@zustand</p>
                                            </div>
                                        }
                                    </div>
                                </div>
                            </div>
                        </div>
                    </tooltip>
                </div>
            }

        </div>
    </div>

    <style>
        .Landschaft {
            position: relative;
            border: black solid 1px;
            width: 100vw;
            height: 70vh;
        }

            .Landschaft > * {
                position: absolute;
                display: block;
                border: outset 2px;
                margin: auto;
                text-align: center;
                width: 1.5rem;
                height: 1.5rem;
                line-height: 1.5rem;
            }

                .Landschaft > * > * {
                    line-height: normal;
                }



            .Landschaft .umgebung {
            }

                .Landschaft .umgebung .bietet {
                    padding-left: 1.5em;
                    padding-inline-start: 1.5em;
                }

                    .Landschaft .umgebung .bietet ul {
                        padding-left: .5em;
                        padding-inline-start: .5em;
                        font-size: xx-small;
                        margin: 0;
                    }

                        .Landschaft .umgebung .bietet ul.befridigt {
                            list-style-type: "+";
                            color: green;
                        }

                        .Landschaft .umgebung .bietet ul.braucht {
                            list-style-type: "-";
                            color: red;
                        }

            .Landschaft .individuum {
            }

                .Landschaft .individuum .status {
                    height: 100%;
                    width: 100%;
                }

                    .Landschaft .individuum .status .bedürfnis {
                        float: left;
                    }

                        .Landschaft .individuum .status .bedürfnis .wert,
                        .Landschaft .individuum .status .bedürfnis .stärke {
                            font-size: 1px;
                            line-height: 1px;
                            color: transparent;
                            float: left;
                            height: 100%;
                            width: 50%;
                            padding: 0;
                        }

                            .Landschaft .individuum .status .bedürfnis .wert > div,
                            .Landschaft .individuum .status .bedürfnis .stärke > div {
                                background-color: white;
                                width: 100%;
                                margin: 0;
                            }

        tooltip {
            display: none;
            position: absolute;
            z-index: 1;
            line-height: normal;
            font-size: x-small;
            border: 1px dotted black;
            background-color: white;
        }

            tooltip li {
                text-align: unset;
            }

            tooltip p {
                margin: 0;
            }

            tooltip .row {
                flex-wrap: unset;
                border: 1px dotted black;
            }

        *:hover > tooltip {
            display: block;
        }


        .log {
        }

            .log li.Trace {
                font-size: 0.5em;
                color: lightgray;
            }

                .log li.Trace > * {
                    color: lightgray;
                }

            .log li.Debug {
                font-size: 0.6em;
            }

                .log li.Debug > * {
                }

            .log li.Information {
                font-size: 0.7em;
                color: blue;
            }

                .log li.Information > * {
                    color: blue;
                }

            .log li.Warning {
                font-size: 1em;
                background-color: yellow;
            }

                .log li.Warning > * {
                    background-color: yellow;
                }

            .log li.Error {
                font-size: 1em;
                background-color: red
            }

                .log li.Error > * {
                    background-color: red
                }

            .log li.Critical {
                font-size: 1.5em;
                background-color: yellow;
                color: purple;
            }

            .log li.Critical {
                color: purple;
            }
    </style>
    <div class="w-25 h-auto float-left mt-5 border">
        <div class="row mb-1">
            <ul class="log">
                @foreach (var item in VerlaufHystorienListe)
                {
                    <li class="@item.LogLevel">
                        <p>@item.Nr: @item.Msg</p>
                    </li>
                }
            </ul>
        </div>
    </div>

</body>
</html>

@code {

    public List<Individuum> individuen = new List<Individuum>();
    public List<IUmgebung> Umgebung = new List<IUmgebung>();

    public WebLogger<EinIndividuum> Logger;
    public void AddLog(WebLoggerEintrag logText)
    {
        _VerlaufHystorienListe.Insert(0, logText);
        löscheAnzahlLetzterEinträge(100);
        StateHasChanged();
    }

    private List<WebLoggerEintrag> _VerlaufHystorienListe = new List<WebLoggerEintrag>();

    public List<WebLoggerEintrag> VerlaufHystorienListe
    {
        get
        {
            return _VerlaufHystorienListe;
        }
    }

    public void löscheAnzahlLetzterEinträge(int maximalEinträge)
    {
        while (maximalEinträge < _VerlaufHystorienListe.Count + 1)
        {
            _VerlaufHystorienListe.RemoveAt(_VerlaufHystorienListe.Count - 1);
        }
    }

    private bool _simulationAktiv;

    int geschwindigkeitSimulation = 10;


    private async Task Simulation()
    {
        //Aktivieren / deaktivieren
        _simulationAktiv = !_simulationAktiv;

        while (_simulationAktiv)
        {
            foreach (var i in individuen)
            {
                await i.BerechneNächsteHandlung(1);
            }
            StateHasChanged();

            await Verzögerung(1);
        }
    }


    private async Task Verzögerung(int sekunden)
    {
        await Task.Delay(sekunden * 1000 / geschwindigkeitSimulation);
    }

    protected override void OnInitialized()
    {
        Umgebung.Add(new Brunnen(600, 200));
        Umgebung.Add(new Brunnen(300, 5));
        Umgebung.Add(new Bananenstaude(200, 400));
        //Umgebung.Add(new Umgebung(100, 200, new Wassermelone()));


        Logger = new WebLogger<EinIndividuum>(s => AddLog(s));
        individuen.Add(new EinIndividuum(Logger) { Umgebung = Umgebung });
        //individuen.Add(new EinIndividuum(Logger, null));
        //individuen.Add(new EinIndividuum(Logger, null));
        StateHasChanged();
    }
}
